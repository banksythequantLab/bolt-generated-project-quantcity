// 20241222_QuantCity_SEC_DataService_v1.0.ts
interface FilingData {
  symbol: string;
  timestamp: string;
  filing_type: string;
  filing_url: string;
  content: string;
  sentiment_score: number;
}

class SECDataService {
  private readonly clickhouseEndpoint: string;

  constructor() {
    this.clickhouseEndpoint = 'http://localhost:8000/api/sec';
  }

  async getFilings(params: {
    startDate?: string;
    endDate?: string;
    symbol?: string;
    type?: string;
  }): Promise<FilingData[]> {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(params).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${this.clickhouseEndpoint}/filings?${queryParams.toString()}`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch filings');
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error fetching filings:', error);
      throw error;
    }
  }

  async getFilingDetail(id: string): Promise<FilingData> {
    const response = await fetch(`${this.clickhouseEndpoint}/filing/${id}`);
    if (!response.ok) {
      throw new Error('Failed to fetch filing detail');
    }
    return response.json();
  }

  // Interface with WordPress if needed
  async syncWithWordPress(filingId: string): Promise<void> {
    const response = await fetch(`${this.clickhouseEndpoint}/sync/wordpress/${filingId}`, {
      method: 'POST',
    });
    if (!response.ok) {
      throw new Error('Failed to sync with WordPress');
    }
  }
}

export const secDataService = new SECDataService();
